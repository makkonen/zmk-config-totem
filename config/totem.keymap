//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FUNC 4
#define MEDIA 5
#define MOUSE 6

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

/ {
    behaviors {
        osm: one_shot_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "One-Shot Mod";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;
            quick-release;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <2 3>;
        };

        osmlt: osm_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&osm>;

            display-name = "OSM Layer-Tap";
        };

        shftlt: shft_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&shft_morph>;

            display-name = "Shift Layer-Tap";
        };

        qu_or: qu_or {
            compatible = "zmk,behavior-hold-tap";
            label = "QU_OR";
            bindings = <&kp>, <&qu>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
        };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shft_morph: shft_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SHFT_MORPH";
            #binding-cells = <0>;
            bindings = <&osm RSHFT>, <&caps_word>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        arcl_tap: arcane_left_tap {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            label = "Arcane Left Tap";
            bindings = <&mo 1>;

            repeat {
                trigger-keys = <B L D Z N R T S G M C V>;
                bindings = <&key_repeat>;
                strict-modifiers;
            };

            arcl_f {
                trigger-keys = <F>;
                bindings = <&kp Y>;
            };

            arcl_w {
                trigger-keys = <W>;
                bindings = <&hat>;
            };

            arcl_p {
                trigger-keys = <P>;
                bindings = <&kp H>;
            };

            arcl_period {
                trigger-keys = <DOT>;
                bindings = <&com>;
            };

            arcl_a {
                trigger-keys = <A>;
                bindings = <&nd>;
            };
        };

        arcr_tap: arcane_right_tap {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            label = "Arcane Right Tap";
            bindings = <&mo 2>;

            repeat {
                trigger-keys = <F O E K P>;
                bindings = <&key_repeat>;
                strict-modifiers;
            };

            arcr_a {
                trigger-keys = <A>;
                bindings = <&nd>;
            };

            arcr_b {
                trigger-keys = <B>;
                bindings = <&ecause>;
            };

            arcr_m {
                trigger-keys = <M>;
                bindings = <&ent>;
            };

            arcr_cw {
                trigger-keys = <C W>;
                bindings = <&ould>;
            };

            arcr_comma {
                trigger-keys = <COMMA>;
                bindings = <&spc_but>;
            };

            arcr_dot {
                trigger-keys = <DOT>;
                bindings = <&org>;
            };

            arcr_nt {
                trigger-keys = <N T>;
                bindings = <&ion>;
            };

            arcr_i {
                trigger-keys = <I>;
                bindings = <&ng>;
            };

            arcr_y {
                trigger-keys = <Y>;
                bindings = <&ou>;
            };
        };

        arcl: arcane_left {
            compatible = "zmk,behavior-hold-tap";
            label = "Arcane Left";
            bindings = <&mo>, <&arcl_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
        };

        arcr: arcane_right {
            compatible = "zmk,behavior-hold-tap";
            label = "Arcane Right";
            bindings = <&mo>, <&arcr_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
        };

        thanks: macro_thanks {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp EXCL>;
            label = "macro_thanks";
        };

        nd: nd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp D>;
        };

        hat: hat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp A &kp T>;
        };

        mc_on: mc_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp N>;
        };

        spc_and: spc_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp A &kp N &kp D>;
        };

        com: com {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp M>;
        };

        ould: ould {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U &kp L &kp D>;
        };

        he: he {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp E>;
        };

        ion: ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp O &kp N>;
        };

        ent: ent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp N &kp T>;
        };

        ng: ng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp G>;
        };

        ou: ou {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U>;
        };

        ecause: ecause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp C &kp A &kp U &kp S &kp E>;
        };

        hich: hich {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp I &kp C &kp H>;
        };

        spc_but: spc_but {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp B &kp U &kp T>;
        };

        org: org {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp R &kp G>;
        };
    };

    combos {
        compatible = "zmk,combos";
        timeout-ms = <30>;
        require-prior-idle-ms = <150>;

        Combo_Tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        Combo_Copy {
            bindings = <&kp LC(C)>;
            key-positions = <23 24>;
        };

        Combo_Paste {
            bindings = <&kp LC(V)>;
            key-positions = <24 25>;
        };

        Combo_Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        Combo_Delete {
            bindings = <&kp DELETE>;
            key-positions = <9 8>;
        };

        Combo_Thanks {
            bindings = <&thanks>;
            key-positions = <11 12 13 10>;
            layers = <0>;
        };

        Combo_Cut {
            bindings = <&kp LC(X)>;
            key-positions = <22 23>;
        };

        Combo_Undo {
            bindings = <&kp LC(Z)>;
            key-positions = <21 22>;
        };

        Combo_Enter {
            bindings = <&none>;
            key-positions = <17 18>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
         &kp B       &kp L  &kp D         &kp W        &kp Z          &kp J          &kp F        &kp O         &kp U       &kp APOS
         &kp N       &kp R  &kp T         &kp S        &kp G          &kp Y          &kp H        &kp A         &kp E       &kp I
&kp ESC  &qu_or Q 0  &kp X  &kp M         &kp C        &kp V          &kp K          &kp P        &comma_morph  &dot_morph  &kp FSLH  &kp RET
                            &lt 6 DELETE  &arcl NAV 0  &lt 5 SPACE    &shftlt SYM 0  &arcr NUM 0  &lt 4 BSPC
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
        &none      LS(TAB)    &swapper    &none       &none        &kp CAPS  &kp HOME     &kp UP    &kp END    &kp PG_UP
        &osm LGUI  &osm LALT  &osm LCTRL  &osm LSHFT  &kp LGUI     &none     &kp LEFT     &kp DOWN  &kp RIGHT  &kp PG_DN
&trans  &kp LC(Z)  &kp LC(X)  &kp LC(C)   &kp LC(V)   &kp LC(Y)    &kp INS   &kp LS(TAB)  &kp DEL   &kp TAB    &none      &trans
                              &trans      &trans      &kp SPACE    &kp BSPC  &kp DEL      &trans
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
        &kp LBKT   &kp N7  &kp N8   &kp N9  &kp RBKT     &none      &none       &none       &none      &none
        &kp MINUS  &kp N4  &kp N5   &kp N6  &kp EQUAL    &none      &osm RSHFT  &osm RCTRL  &osm RALT  &osm RGUI
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3  &kp BSLH     &kp RC(Y)  &kp RC(V)   &kp RC(C)   &kp RC(X)  &kp RC(Z)  &trans
                           &kp DOT  &kp N0  &trans       &trans     &trans      &trans
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
        &kp LBRC   &kp AMPS  &kp STAR   &kp LPAR   &kp RBRC    &none   &none       &none       &none      &none
        &kp COLON  &kp DLLR  &kp PRCNT  &kp CARET  &kp PLUS    &none   &osm RSHFT  &osm RCTRL  &osm RALT  &osm RGUI
&trans  &kp TILDE  &kp EXCL  &kp AT     &kp HASH   &kp PIPE    &none   &none       &none       &none      &none      &trans
                             &trans     &kp LPAR   &kp RPAR    &trans  &trans      &trans
            >;
        };

        func_layer {
            label = "FUNC";
            bindings = <
        &kp F12  &kp F7  &kp F8  &kp F9  &kp PSCRN          &none                 &none             &none         &none              &none
        &kp F11  &kp F4  &kp F5  &kp F6  &kp SLCK           &none                 &kp LG(LC(LEFT))  &kp RG(TAB)   &kp LC(LG(RIGHT))  &none
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &kp C_BRIGHTNESS_DEC  &kp C_MUTE        &kp C_VOL_DN  &kp C_VOL_UP       &kp C_BRIGHTNESS_INC  &trans
                         &trans  &trans  &trans             &trans                &trans            &trans
            >;
        };

        media_layer {
            label = "MEDIA";
            bindings = <
        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none  &none       &kp C_VOL_UP  &none       &none
        &bt BT_CLR    &out OUT_USB  &out OUT_BLE  &bootloader   &sys_reset      &none  &kp C_PREV  &kp C_VOL_DN  &kp C_NEXT  &none
&trans  &none         &bt BT_PRV    &bt BT_NXT    &none         &none           &none  &none       &kp C_PP      &kp C_MUTE  &none  &trans
                                    &none         &none         &none           &none  &kp C_STOP  &none
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
        &none  &none     &kp UP_ARROW  &none      &none     &none      &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &none
        &none  &kp LEFT  &kp DOWN      &kp RIGHT  &none     &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&trans  &none  &none     &none         &none      &none     &none      &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &none  &trans
                         &trans        &trans     &trans    &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;
        };
    };
};
