#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/pointing.h>

#define BASE 0
#define NAV  1
#define NUM  2
#define SYM  3
#define FUNC 4
#define MEDIA 5
#define MOUSE 6

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <170>;
};

&lt { quick-tap-ms = <100>; };

/ {
    behaviors {
        osm: one_shot_mod {
            compatible = "zmk,behavior-sticky-key";
            label = "One-Shot Mod";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <2000>;
            quick-release;
            ignore-modifiers;
        };

        swapper: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;

            ignored-key-positions = <2 1>;
        };

        osmlt: osm_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&osm>;

            display-name = "OSM Layer-Tap";
        };

        shftlt: shft_layer_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&shft_morph>;

            display-name = "Shift Layer-Tap";
        };

        qu_or: qu_or {
            compatible = "zmk,behavior-hold-tap";
            label = "QU_OR";
            bindings = <&kp>, <&qu>;

            #binding-cells = <2>;
            tapping-term-ms = <220>;
            flavor = "tap-preferred";
        };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMI>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        shft_morph: shft_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SHFT_MORPH";
            #binding-cells = <0>;
            bindings = <&osm RSHFT>, <&caps_word>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        arcl_tap: arcane_left_tap {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            label = "Arcane Left Tap";
            bindings = <&mo 1>;

            repeat {
                trigger-keys = <B L D Z N R T S G M C V>;
                bindings = <&key_repeat>;
                strict-modifiers;
            };

            arcl_fh {
                trigger-keys = <F H>;
                bindings = <&kp Y>;
            };

            arcl_w {
                trigger-keys = <W>;
                bindings = <&hat>;
            };

            arcl_p {
                trigger-keys = <P>;
                bindings = <&kp H>;
            };

            arcl_period {
                trigger-keys = <DOT>;
                bindings = <&com>;
            };

            arcl_i {
                trigger-keys = <I>;
                bindings = <&mc_on>;
            };

            arcl_a {
                trigger-keys = <A>;
                bindings = <&nd>;
            };
        };

        arcr_tap: arcane_right_tap {
            compatible = "zmk,behavior-adaptive-key";
            #binding-cells = <0>;
            label = "Arcane Right Tap";
            bindings = <&mo 2>;

            repeat {
                trigger-keys = <F O E K P>;
                bindings = <&key_repeat>;
                strict-modifiers;
            };

            arcr_a {
                trigger-keys = <A>;
                bindings = <&nd>;
            };

            arcr_b {
                trigger-keys = <B>;
                bindings = <&ecause>;
            };

            arcr_m {
                trigger-keys = <M>;
                bindings = <&ent>;
            };

            arcr_cw {
                trigger-keys = <C W>;
                bindings = <&ould>;
            };

            arcr_comma {
                trigger-keys = <COMMA>;
                bindings = <&spc_but>;
            };

            arcr_dot {
                trigger-keys = <DOT>;
                bindings = <&org>;
            };

            arcr_nt {
                trigger-keys = <N T>;
                bindings = <&ion>;
            };

            arcr_i {
                trigger-keys = <I>;
                bindings = <&ng>;
            };

            arcr_y {
                trigger-keys = <Y>;
                bindings = <&ou>;
            };
        };

        arcl: arcane_left {
            compatible = "zmk,behavior-hold-tap";
            label = "Arcane Left";
            bindings = <&mo>, <&arcl_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
        };

        arcr: arcane_right {
            compatible = "zmk,behavior-hold-tap";
            label = "Arcane Right";
            bindings = <&mo>, <&arcr_tap>;

            #binding-cells = <2>;
            tapping-term-ms = <185>;
        };

        parens_ht: parens_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "PARENS_HT";
            bindings = <&macro_parens>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        braces_ht: braces_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "BRACES_HT";
            bindings = <&macro_braces>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        brackets_ht: brackets_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "BRACKETS_HT";
            bindings = <&macro_brackets>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        gt_lt_ht: gt_lt_ht {
            compatible = "zmk,behavior-hold-tap";
            label = "GT_LT_HT";
            bindings = <&macro_greater_less>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <180>;
            flavor = "balanced";
        };

        excl_morph: excl_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "EXCL_MORPH";
            #binding-cells = <0>;
            bindings = <&kp EXCL>, <&kp QUESTION>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        swapper_ctrl: swapper_ctrl {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_CTRL";
            #binding-cells = <0>;
            bindings = <&kt LCTL>, <&kp TAB>, <&kt LCTL>;

            ignored-key-positions = <2 1>;
        };

        swapper_win1: swapper_win1 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN1";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N1>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };

        swapper_win2: swapper_win2 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN2";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N2>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };

        swapper_win3: swapper_win3 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN3";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N3>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };

        swapper_win4: swapper_win4 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN4";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N4>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };

        swapper_win5: swapper_win5 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN5";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N5>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };

        swapper_win6: swapper_win6 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN6";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N6>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };

        swapper_win7: swapper_win7 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN7";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N7>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };

        swapper_win8: swapper_win8 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN8";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N8>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };

        swapper_win9: swapper_win9 {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER_WIN9";
            #binding-cells = <0>;
            bindings = <&kt LWIN>, <&kp N9>, <&kt LWIN>;

            ignored-key-positions = <1 2 3 12 13 14 23 24 25>;
        };
    };

    macros {
        qu: qu {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp Q &kp U>;
        };

        thanks: macro_thanks {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LS(T) &kp H &kp A &kp N &kp K &kp S &kp EXCL>;
            label = "macro_thanks";
        };

        nd: nd {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp D>;
        };

        hat: hat {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp A &kp T>;
        };

        mc_on: mc_on {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp N>;
        };

        spc_and: spc_and {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp A &kp N &kp D>;
        };

        com: com {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp C &kp O &kp M>;
        };

        ould: ould {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U &kp L &kp D>;
        };

        he: he {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp E>;
        };

        ion: ion {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp I &kp O &kp N>;
        };

        ent: ent {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp N &kp T>;
        };

        ng: ng {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp N &kp G>;
        };

        ou: ou {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp U>;
        };

        ecause: ecause {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp E &kp C &kp A &kp U &kp S &kp E>;
        };

        hich: hich {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp H &kp I &kp C &kp H>;
        };

        spc_but: spc_but {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp SPACE &kp B &kp U &kp T>;
        };

        org: org {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp O &kp R &kp G>;
        };

        macro_greater_less: macro_greater_less {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LT &kp GT &kp LEFT>;
            label = "MACRO_GREATER_LESS";
        };

        macro_brackets: macro_brackets {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACKET &kp RIGHT_BRACKET &kp LEFT>;
            label = "MACRO_BRACKETS";
        };

        macro_braces: macro_braces {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_BRACE &kp RIGHT_BRACE &kp LEFT>;
            label = "MACRO_BRACES";
        };

        macro_parens: macro_parens {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LEFT_PARENTHESIS &kp RIGHT_PARENTHESIS &kp LEFT>;
            label = "MACRO_PARENS";
        };
    };

    combos {
        compatible = "zmk,combos";
        timeout-ms = <15>;
        require-prior-idle-ms = <150>;

        Combo_Tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        Combo_Copy {
            bindings = <&kp LC(C)>;
            key-positions = <23 24>;
        };

        Combo_Paste {
            bindings = <&kp LC(V)>;
            key-positions = <24 25>;
        };

        Combo_Backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <18 19>;
        };

        Combo_Delete {
            bindings = <&kp DELETE>;
            key-positions = <9 8>;
        };

        Combo_Thanks {
            bindings = <&thanks>;
            key-positions = <11 12 13 10>;
            layers = <0>;
        };

        Combo_Cut {
            bindings = <&kp LC(X)>;
            key-positions = <22 23>;
        };

        Combo_Undo {
            bindings = <&kp LC(Z)>;
            key-positions = <21 22>;
        };

        Combo_Enter {
            bindings = <&kp RET>;
            key-positions = <17 18>;
        };

        Combo_Escape {
            bindings = <&kp ESCAPE>;
            key-positions = <10 11>;
        };

        Combo_Command {
            bindings = <&kp LA(SPACE)>;
            key-positions = <34 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
         &kp B       &kp L  &kp D         &kp W        &kp Z          &kp J          &kp F        &kp O         &kp U       &kp APOS
         &kp N       &kp R  &kp T         &kp S        &kp G          &kp Y          &kp H        &kp A         &kp E       &kp I
&kp ESC  &qu_or Q 0  &kp X  &kp M         &kp C        &kp V          &kp K          &kp P        &comma_morph  &dot_morph  &excl_morph  &kp RET
                            &lt 6 DELETE  &arcl NAV 0  &lt 5 SPACE    &shftlt SYM 0  &arcr NUM 0  &lt 4 BSPC
            >;
        };

        nav_layer {
            label = "NAV";
            bindings = <
        &none      &kp LS(TAB)  &swapper    &none       &none        &kp CAPS      &kp HOME     &kp UP    &kp END    &kp PG_UP
        &osm LGUI  &osm LALT    &osm LCTRL  &osm LSHFT  &kp LGUI     &kp K_CANCEL  &kp LEFT     &kp DOWN  &kp RIGHT  &kp PG_DN
&trans  &kp LC(Z)  &kp LC(X)    &kp LC(C)   &kp LC(V)   &kp LC(Y)    &kp INS       &kp LS(TAB)  &kp DEL   &kp TAB    &kp BACKSPACE  &trans
                                &trans      &trans      &trans       &trans        &trans       &trans
            >;
        };

        num_layer {
            label = "NUM";
            bindings = <
        &kp LBKT   &kp N7  &kp N8   &kp N9    &kp RBKT     &none      &none       &none       &none      &none
        &kp MINUS  &kp N4  &kp N5   &kp N6    &kp EQUAL    &none      &osm RSHFT  &osm RCTRL  &osm RALT  &osm RGUI
&trans  &kp GRAVE  &kp N1  &kp N2   &kp N3    &kp BSLH     &kp RC(Y)  &kp RC(V)   &kp RC(C)   &kp RC(X)  &kp RC(Z)  &trans
                           &kp DOT  &lt 1 N0  &trans       &trans     &trans      &trans
            >;
        };

        sym_layer {
            label = "SYM";
            bindings = <
        &gt_lt_ht 0 LESS_THAN  &braces_ht 0 LEFT_BRACE  &brackets_ht 0 LEFT_BRACKET  &parens_ht 0 LEFT_PARENTHESIS  &kp RBRC    &none          &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp GREATER_THAN
        &kp AMPS               &kp SLASH                &kp MINUS                    &kp AT                         &kp PLUS    &kp RA(SPACE)  &osm RSHFT             &osm RCTRL         &osm RALT        &osm RGUI
&trans  &kp TILDE              &kp EXCL                 &kp ASTRK                    &kp HASH                       &kp PIPE    &none          &none                  &none              &none            &none             &trans
                                                        &trans                       &kp LPAR                       &kp RPAR    &trans         &trans                 &trans
            >;
        };

        func_layer {
            label = "FUNC";
            bindings = <
        &kp F12  &kp F7  &kp F8  &kp F9  &kp PSCRN          &none                 &none             &none         &none              &none
        &kp F11  &kp F4  &kp F5  &kp F6  &kp SLCK           &none                 &kp LG(LC(LEFT))  &kp RG(TAB)   &kp LC(LG(RIGHT))  &none
&trans  &kp F10  &kp F1  &kp F2  &kp F3  &kp PAUSE_BREAK    &kp C_BRIGHTNESS_DEC  &kp C_MUTE        &kp C_VOL_DN  &kp C_VOL_UP       &kp C_BRIGHTNESS_INC  &trans
                         &trans  &trans  &trans             &trans                &trans            &trans
            >;
        };

        media_layer {
            label = "MEDIA";
            bindings = <
        &none  &kp LS(LC(TAB))  &swapper_ctrl  &none          &none    &none  &kp RA(LEFT)  &none             &kp RA(RIGHT)  &none
        &none  &kp LEFT         &kp C_PP       &kp RIGHT      &none    &none  &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT     &none
&trans  &none  &kp LC(LEFT)     &none          &kp LC(RIGHT)  &none    &none  &kp RC(LEFT)  &kp C_STOP        &kp RC(RIGHT)  &none  &trans
                                &none          &none          &none    &none  &none         &none
            >;
        };

        mouse_layer {
            label = "MOUSE";
            bindings = <
        &none  &mkp MCLK  &kp UP_ARROW  &mkp RCLK  &none     &none      &msc SCRL_UP    &mmv MOVE_UP    &msc SCRL_DOWN   &none
        &none  &kp LEFT   &kp DOWN      &kp RIGHT  &none     &none      &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &none
&trans  &none  &none      &none         &none      &none     &none      &msc SCRL_LEFT  &none           &msc SCRL_RIGHT  &none  &trans
                          &trans        &trans     &trans    &mkp LCLK  &mkp RCLK       &mkp MCLK
            >;
        };

        Internals_layer {
            label = "INTERNAL";
            bindings = <
        &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &none       &none        &none  &none  &none
        &bt BT_CLR    &out OUT_USB  &out OUT_BLE  &bootloader   &sys_reset      &sys_reset  &bootloader  &none  &none  &none
&trans  &none         &bt BT_PRV    &bt BT_NXT    &none         &none           &none       &none        &none  &none  &none  &trans
                                    &none         &none         &none           &none       &none        &none
            >;
        };

        Windows_layer {
            bindings = <
        &trans            &swapper_win7  &swapper_win8  &swapper_win9  &trans               &trans  &trans  &trans  &trans  &trans
        &kp LG(LC(LEFT))  &swapper_win4  &swapper_win5  &swapper_win6  &kp LC(LG(RIGHT))    &trans  &trans  &trans  &trans  &trans
&trans  &trans            &swapper_win1  &swapper_win2  &swapper_win3  &trans               &trans  &trans  &trans  &trans  &trans  &trans
                                         &trans         &trans         &trans               &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        INTERNALS {
            if-layers = <4 6>;
            then-layer = <7>;
        };

        windows {
            if-layers = <1 6>;
            then-layer = <8>;
        };
    };
};
